#!/bin/bash
# Configure script for beye project
#
. ./functions
init_functions

ENABLED_LIST=(
    "gomp|use GNU OpenMP (requires gcc-4.3+)",
    "fastcall|use regparm method on x86 systems",
    "fastmemcpy|use SIMD optimized memcpy()",
    "mouse|build mouse support on *nix systems",
    "iconv|build iconv support",
)

DISABLED_LIST=(
    "gcov|compile gnu coverage information into PROGRAM",
    "profile|compile profiling information into PROGRAM",
)

AUTOCONF_LIST=(
    "ENABLED_LIST",
    "DISABLED_LIST"
)

PATH_LIST=(
    "prefix|architecture-independent files|/usr/local",
    "exec_prefix|architecture-dependent files|\$prefix",
    "bindir|user executables|\$exec_prefix/bin",
    "libdir|object code libraries|\$exec_prefix/lib",
    "datadir|read-only architecture-independent data|\$prefix/share/beye",
    "mandir|read-only configuration files|\$prefix/share/man1"
)

PROGNAME_LIST=(
  "program_prefix|prepend PREFIX to installed program names",
  "program_suffix|append SUFFIX to installed program names",
  "program_transform_name|use TRANSFORM_NAME as program name|beye"
)

SYSTYPES_LIST=(
    "build|configure for building on BUILD [guessed]",
    "host|cross-compile to build program to run on HOST [BUILD]",
    "cc|use this C compiler to build PROGRAM|gcc",
    "as|use this ASSEMBLER to build PROGRAM|as",
    "ld|use this LINKER to build PROGRAM|gcc",
    "ldconfig|use this LDCONFIG to install PROGRAM|ldconfig",
    "install|use this INSTALL to install PROGRAM|install",
    "pkg_config|use this PKG-CONFIG to configure PROGRAM|pkg-config",
    "ar|use this AR to build beyelib|ar -r",
    "ranlib|use RANLIB to build indexes on builib|ranlib",
    "rm|use RM program to cleanup files|rm",
    "ln|use LN program to make soft link|ln",
    "cd|use CD program to change directory|cd",
    "cp|use CP program to copy files|cp",
    "debug|compile debugging information into PROGRAM|0",
)

SYSCONF_LIST=(
    "SYSTYPES_LIST",
    "PROGNAME_LIST",
    "PATH_LIST"
)

EXTRA_LIST=(
    "asflags|add these FLAGS to [\$ASFLAGS=$ASFLAGS]",
    "cflags|add these FLAGS to [\$CFLAGS=$CFLAGS]",
    "ldflags|add these FLAGS to [\$LDFLAGS=$LDFLAGS]",
    "extralibs|add these LIBS to [\$LIBS=$LIBS]"
)

ADD_LIST=(
    "EXTRA_LIST",
)

ENVIRONMENT_LIST=(
    "MAKE|Make command (example: 'make -j')|make",
    "AS|Assembler command|as",
    "CC|C compiler command (example: 'gcc -m64')|cc",
    "CFLAGS|C compiler flags (example: '-funit-at-a-time')",
    "LDFLAGS|linker flags (example: '-L/opt/lib64')",
    "LIBS|additional libraries (example: 'LIBS=-lacml_mv')",
    "DESTDIR|specifies base of installation"
)

HELP_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "PROGNAME_LIST|Program names|--",
    "SYSTYPES_LIST|System types|--",
    "EXTRA_LIST|Extralist|--",
    "ENABLED_LIST|Optional list of enabled fautures|--disable-",
    "DISABLED_LIST|Optional list of disabled fautures|--enable-",
    "ENVIRONMENT_LIST|Environment variables|  "
)

DEFAULT_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "SYSTYPES_LIST|System types|--",
    "PROGNAME_LIST|Program names|--",
    "EXTRA_LIST|Extralist|--"
)

enable_list "ENABLED_LIST"
disable_list "DISABLED_LIST"
make_environment "ENVIRONMENT_LIST"

for ac_option do
  optval="${ac_option#*=}"
  case "$ac_option" in
  --help)
    print_help "HELP_LIST"
    exit 0
    ;;
  --enable-*=*|--disable-*=*)
    eval $(echo "${ac_option%%=*}" | sed 's/--/action=/;s/-/ thing=/')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    if test "$action" = "disable"; then
      test "${optval}" = "no" && action=enable
    else
      test "${optval}" = "no" && action=disable
    fi
    echo "$action ${thing}"
    $action ${thing}
    ;;

    --enable-?*|--disable-?*)
    eval $(echo "$ac_option" | sed 's/--/action=/;s/-/ thing=/;s/-/_/g')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    $action ${thing}
    ;;
    *)
    optname="${ac_option%%=*}"
    optname="${optname#--}"
    optname=${optname//-/_}
    if in_list "SYSCONF_LIST" $optname ; then
        eval $optname=$optval
    elif in_list "ADD_LIST" $optname ; then
	action="add_$optname"
	$action ${optval}
    else
        bad_options="$ac_option $bad_options"
    fi
    ;;
  esac
done
make_defaults "DEFAULT_LIST"

mktmps
guess_target config.mak config.h

echocheck "Program name"
prog_alias=$program_transform_name
prog_alias="$program_prefix$prog_alias$program_suffix"
echores "$prog_alias"

if cygwin ; then
# Keep everything in .exe folder
test -z "$datadir" && datadir="."
test -z "$mandir" && confdir="."
test -z "$libdir" && libdir="."
fi

srcdir=`pwd`
#checking for pkg-config
test $($pkg_config --version 2>/dev/null) || die "no pkg-config found"
#############################################################################
test_optimizations config.mak config.h

enabled "$profile"	&& disable fastcall
print_config USE_ config.h config.mak fastcall
print_config USE_ config.h config.mak fastmemcpy

# Checking for GOMP
enabled gomp && check_ldflags -fopenmp || disable gomp
enabled gomp && require2 gomp omp.h omp_get_thread_num -lgomp || disable gomp
enabled gomp && check_cflags -fopenmp || disable gomp
print_config HAVE_ config.h config.mak gomp
#enabled gomp && check_cflags -ftree-parallelize-loops=4
#####################################################
add_cflags "-Werror-implicit-function-declaration"
check_cflags "-Wextra"

echocheck CFLAGS
echores   $CFLAGS
echocheck ASFLAGS
echores   $ASFLAGS
echocheck LDFLAGS
echores   $LDFLAGS
echocheck LIBS
echores   $LIBS
echocheck extralibs
echores   $extralibs

######################
# MAIN TESTS GO HERE #
######################
add_cflags "-I$srcdir"

###
###
###

cc_name=`$cc -v 2>&1 | tail -n 1 | cut -d ' ' -f 1`
cc_version=`$cc -dumpversion`

echocheck "C compiler name"
echores $cc_name
case $cc_name in
    gcc)
    ;;
    *)
      die "Unknown compiler name $cc_name. Project requires GCC"
    ;;
esac

echocheck "C compiler version"
echores $cc_version
disable gcc44_workaround
case $cc_version in
    4.[4-9]|4.[4-9].[0-9])
      enable gcc44_workaround
      ;;
  [0-2]|[0-2].[0-9]|[0-2].[0-9].[0-9])
    die "Please upgrade your gcc upto gcc-3.0 at least"
    ;;
esac
# Printout architecture
machine=generic
if x86_32 ; then
machine=ia32
fi
if x86_64 ; then
machine=x86_64
fi
echo "#define __DEFAULT_DISASM 0" >>config.h
x86 && echo "#define CAN_COMPILE_X86_GAS 1">>config.h
is_generic_cpu=$(echo $machine | grep generic)

disable ppack
echocheck "pragma pack"
cat > $TMPC << EOF
#pragma pack(1)
int main(void){return 0;}
EOF
cc_check && enable ppack
enabled ppack || die "Please upgrade your compiler"
echores "$ppack"
print_config HAVE_ config.h config.mak ppack

#Printout operating system
app_libs=""
app_cflags=""
app_ldflags=""
ar="ar -r"
enable terminal_out
libext=a
libprefix=lib
if dos ; then
app_ldflags="--force-exe-suffix"
libext=lib
disable terminal_out
fi
if os2 ; then
app_ldflags="-Zexe -Zsmall-conv -Zsys -Zomf -Zstack 1024"
app_cflags="-Zomf"
disable terminal_out
ar="emxomfar -p32 rc"
ranlib=echo
libext=lib
fi
if win32 ; then
app_libs="-lwinmm"
app_ldflags="-mno-cygwin --force-exe-suffix"
app_cflags="-mno-cygwin"
libext=lib
disable terminal_out
fi
if beos ; then
app_cflags="-D__DISABLE_MMF -D__DISABLE_ASM -D__DISABLE_SIGIO"
datadir="/boot/home/config/lib"
fi
if qnx ; then
app_cflags="-D__DISABLE_MMF"
app_libs="-ltermlib -lunix -lphoton3r.lib"
fi
if qnxnto ; then
app_cflags="-D__QNX6__ -D__DISABLE_MMF"
app_libs="-lncurses"
fi
if linux ; then
app_cflags=""
fi
CFLAGS="$CFLAGS $app_cflags"
LDFLAGS="$LDFLAGS $app_ldflags"
LIBS="$LIBS $app_libs"
print_config HAVE_ config.h config.mak terminal_out

check_func2 stdio.h popen
print_config HAVE_ config.h config.mak popen

check_func2 stdio.h pclose
print_config HAVE_ config.h config.mak pclose

check_header sys/resource.h
print_config HAVE_ config.h config.mak sys_resource_h

if enabled iconv; then
require2 giconv giconv.h iconv_open -lgiconv
print_config HAVE_ config.h config.mak giconv
disable iconv
for ld_i in "" -liconv ; do
disabled iconv	&& require2 iconv iconv.h iconv_open $ld_i
enabled iconv	&& break
done
print_config HAVE_ config.h config.mak iconv
fi

enabled mouse && require2 mouse gpm.h Gpm_GetEvent -lgpm
print_config HAVE_ config.h config.mak mouse

./version.sh

#Force including of our .h files before standard
#############################################################################
echo "Creating config.h"
cat >> config.h << EOF
#define HOST "$host"
/* Defined to some form of __attribute__ ((...)) if the compiler supports
   a different, more efficient calling convention.  */
#if defined ( USE_FASTCALL ) && defined ( __i386__ )
/*# define internal_function __attribute__ ((regparm (3), stdcall))*/
# define __FASTCALL__ __attribute__ ((regparm (3)))
#else
# define __FASTCALL__
#endif
EOF

echo "Creating config.mak"
cat >> config.mak << EOF
# -------- Generated by configure -----------

CC=$cc
LD=$ld
AR=$ar
RANLIB=$ranlib
RM=$rm
LN=$ln
CD=$cd
CP=$cp
INSTALL=$install
PROGNAME=$prog_alias
LIBEXT=$libext
LIBPREFIX=$libprefix
PREFIX=$prefix
DATADIR=$datadir
LIBDIR=$libdir
MANDIR=$mandir
DESTDIR=$DESTDIR
HOST=$host_os
MACHINE=$machine
EOF
echo "HOST_CFLAGS=$CFLAGS" >>config.mak
echo "EXTRALIBS=$extralibs" >> config.mak
echo "HOST_LDFLAGS=$LDFLAGS" >> config.mak

#last: printout configure
cat << EOF | tee -a $TMPLOG

Config files successfully generated by ./configure !

  Install prefix: $prefix
  Data directory: $datadir
  Lib directory: $libdir
  MAN directory: $mandir
  Compiler: $cc
  Linker: $ld
  Librarian: $ar
  Ranlib: $ranlib
  Remover: $rm
  TARGETS
    system: $host_os
    arch: $machine

EOF

test -n "$is_generic_cpu" && echo "Generic optimization detected: Seems noone have ported this project on your CPU"

rmtmps

